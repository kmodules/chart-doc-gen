// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// readme.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xdf\x6b\xe3\x38\x10\xc7\xdf\xf5\x57\x0c\xe4\x1e\x9a\xd0\x38\xef\x29\x3d\x28\xed\x1d\x57\x2e\x77\x94\x36\x2d\x2c\x21\xe0\xa9\x3d\x89\xb5\x95\x25\xad\x24\xa7\x1b\x4c\xfe\xf7\x45\x3f\xe2\x38\xd9\x96\xee\xcb\xb2\xfb\x16\x8d\x3c\x33\x9a\xef\xe7\x3b\x19\x40\xdb\x42\x76\x67\xd4\x67\x2a\x5c\xf6\x50\x29\xe3\xfe\xc7\x9a\x60\xb7\x63\x6c\xd1\xbf\x4a\xd1\xe5\x59\x3f\xf8\x78\x3f\x83\xdd\x6e\x08\xe3\xa3\x2a\x37\x64\x0b\xc3\xb5\xe3\x4a\x86\x3a\x83\x01\xcc\x67\x17\x37\xf7\x17\x8c\xe5\x79\x5e\x28\x69\x95\x20\xf6\x07\x54\x24\x6a\x30\xa4\x15\x60\x59\x86\x0a\xf7\xa4\x95\xe5\x4e\x99\xed\xbe\xdf\x69\x38\x76\x3c\x4a\x6e\x74\x89\xae\xab\xc7\xa5\x75\x28\x44\xca\x13\x84\x96\xde\xab\x95\xc2\x13\x1f\xbe\xae\xd0\x74\x43\xc2\x58\x7e\x97\x6f\x35\x16\x41\x96\x3c\xcf\xc3\x48\xb7\xd2\x19\x55\x36\x85\x1f\x93\xb1\x79\xc5\x2d\x14\xbe\x08\x94\xa4\x85\xda\xda\x23\x49\xae\xb4\xf6\x75\x95\x04\x84\xc5\xbf\xcd\x33\x19\x49\x8e\xec\xf2\xac\x72\x4e\x4f\x27\x93\x97\x2e\x94\x71\x35\x84\x42\x34\xd6\x91\x81\xc6\x72\xb9\x06\x57\x11\x2c\xfe\x21\x51\xc7\xcf\xed\x74\x32\xf1\xa3\x66\xb6\x1a\x82\xc6\xe2\x05\xd7\x04\x35\x4a\x5c\x93\xc9\xc2\xd3\xee\x0c\x19\xfa\xd2\x70\xcb\x1d\x59\xd6\xb6\x60\x50\xae\xc9\xbf\xa6\x17\xf7\xb3\x44\x6e\xfe\x57\xdb\x8e\x81\x64\xb9\xe7\x75\x1b\x55\xdc\x77\x0f\xea\x30\x36\x57\x9d\xbc\x3e\x1a\xc7\x7d\xe5\xae\x0a\x47\x13\xd5\x02\xe9\x45\xcc\xdf\xd0\x3f\x9f\xbe\x65\x80\x9f\x0d\xac\x6d\xe3\x13\x53\xc6\x13\x19\x1b\x8d\x09\xe3\xf1\x26\x1e\x2e\xdb\x36\x0b\x1f\x26\x05\x02\xe2\xb9\x9f\x50\xd5\x35\xca\xf2\x03\xa4\x7e\xf8\x03\xd3\x0e\x1e\x8f\x37\x25\xad\xb0\x11\x0e\x0a\x25\x57\x7c\xdd\x18\xf4\x86\xc9\xc0\x97\x5f\x1c\xc5\x96\x67\x83\xa3\xf3\x10\x2c\x05\x77\x81\xe0\xd6\xd9\x50\x4c\xa3\xc1\x9a\x1c\x19\x7f\x44\x07\x05\x4a\x78\xa6\xae\x36\x95\x50\x36\xc6\x53\x4b\xaa\xc6\x66\x8c\xfd\x09\xa3\xd1\x9c\xeb\xd1\x68\x0a\x33\x6e\x1d\x78\xc1\x13\x2f\x9b\x5c\x96\x07\x1a\xbe\x55\xf4\xf7\xa3\xe4\xef\x99\xa0\xd9\x5f\x4d\x4a\x12\xe4\x28\x5c\xff\x38\xf1\x94\xf4\x16\xf0\x0f\x17\xaf\x4f\xc5\x50\xad\x36\x64\x61\xef\xc7\x3e\x03\x55\x6b\x25\x49\x3a\x0b\x68\xad\x2a\x38\x3a\x2a\x0f\x56\x8d\xce\x8d\x64\x45\x48\xe8\x19\x38\xee\xd0\x75\x1f\x45\xec\xbb\x52\x42\xa8\xd7\x20\x07\x3e\x0b\xea\x61\xe9\xb8\xf9\x70\x8f\x91\x5a\x1d\xa4\x39\x32\x6c\xde\x7b\x82\xab\x88\x9b\xce\x26\x1b\x14\x0d\xd9\x8c\xb1\x43\xce\x53\x08\x85\xd5\x7c\xd0\x54\xf0\xd5\x16\x08\x8b\xea\xd0\xa8\xf7\x3f\x91\x8f\xc7\x96\x1c\xbc\xd0\xf6\x32\x54\x5a\x9c\x77\x3f\x97\x39\xa0\x59\x37\x35\x49\x07\x4e\x25\xde\x09\x64\x9e\xc1\xdf\xca\x00\x7d\xc5\x5a\x0b\xfa\x25\x7b\x0a\xf1\xe5\xa7\x63\xff\x15\x9f\xd4\x19\xe0\x4a\x38\x32\x12\x1d\xdf\x90\xd8\x9e\x03\xc2\xa7\xab\xff\x66\xb0\xe2\x82\xe2\x46\xd8\xa0\x10\x4f\x48\xa3\x9a\xb0\x52\xe6\x74\x7d\xd2\xe6\x68\xa3\x36\xbc\xf4\xde\xa8\xb8\x20\x76\x62\xf9\x00\xe9\xb7\x90\x26\x0d\x92\xdc\xb1\xc5\x5a\x04\x39\xbe\x05\x00\x00\xff\xff\x6d\xd0\x87\x05\xbf\x07\x00\x00")

func readmeTplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTpl,
		"readme.tpl",
	)
}

func readmeTpl() (*asset, error) {
	bytes, err := readmeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tpl", size: 1983, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"readme.tpl": readmeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"readme.tpl": {readmeTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
