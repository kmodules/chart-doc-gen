// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// readme.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xcd\x6e\xdb\x38\x10\xbe\xf3\x29\x06\xf0\x1e\x62\x23\x92\xef\x0e\xb2\x40\x90\xec\x62\x17\x75\x8b\x20\x71\x0a\x14\x86\x01\x4d\xa4\x91\xc5\x86\x22\x59\x92\x72\x6a\x08\x7e\xf7\x82\xa4\x2c\xcb\x4e\xd2\xf6\xd8\xdc\xc4\x21\xe7\xe7\xfb\x19\x7b\x04\x6d\x0b\xe9\xad\x51\x5f\x29\x77\xe9\x7d\xa5\x8c\xfb\x84\x35\xc1\x6e\xc7\xd8\x72\x78\xd5\x45\x57\x67\xc3\xe0\xc3\xdd\x1c\x76\xbb\x31\x24\x47\x55\x6e\xc8\xe6\x86\x6b\xc7\x95\x0c\x75\x46\x23\x58\xcc\x2f\x6e\xee\x2e\x18\xcb\xb2\x2c\x57\xd2\x2a\x41\xec\x2f\xa8\x48\xd4\x60\x48\x2b\xc0\xa2\x08\x15\xee\x48\x2b\xcb\x9d\x32\xdb\x7d\xbf\xd3\x70\xec\x78\x94\xdc\xe8\x02\x5d\x5f\x8f\x4b\xeb\x50\x88\x2e\x4f\x10\x5a\x7a\xab\x56\x17\x9e\xfa\xf0\x75\x85\xa6\x07\x09\x89\x7c\x91\x6f\x35\xe6\xfe\xae\x6d\xe1\x99\xbb\x6a\x9f\xf1\x99\x8c\x8d\x38\x21\x49\x36\xf1\x70\xd9\xb6\x69\x78\x48\xb2\xf0\xc3\x66\x59\x16\x48\xf8\x5f\x3a\xa3\x8a\x26\xf7\xc4\x30\xb6\xa8\xb8\x85\xdc\x17\x81\x82\xb4\x50\x5b\x7b\x44\xe2\x95\xd6\xbe\xa8\x92\x80\xb0\xfc\xd0\x3c\x92\x91\xe4\xc8\xae\xce\x2a\xe7\xf4\x6c\x3a\x7d\xea\x43\x29\x57\x63\xc8\x45\x63\x1d\x19\x68\x2c\x97\x6b\x70\x15\xc1\xf2\x3f\x12\x75\x7c\x6e\x67\xd3\xa9\x27\x27\xb5\xd5\x18\x34\xe6\x4f\xb8\x26\xa8\x51\xe2\x9a\x4c\x1a\x46\xbb\x35\x64\xe8\x5b\xc3\x2d\x77\x64\x59\xdb\x82\x41\xb9\x26\x3f\xcd\x20\xee\xb1\x44\xa5\xfd\x57\xdb\x26\x7b\x80\x11\x5c\xe0\x7d\xdf\x3d\xb0\xc3\xd8\x42\xf5\x82\xf8\x68\x84\x1b\xf8\xf3\x47\x13\xf9\x05\xe9\x69\xcf\x5e\x51\x2c\x9b\xbd\x66\x99\x3f\x55\xe2\x85\x47\xa8\xea\x1a\x65\xf1\x0b\x49\x3d\xf8\x83\xa6\xbd\x78\x3c\xde\x14\x54\x62\x23\x1c\xe4\x4a\x96\x7c\xdd\x18\xf4\x86\x49\xc1\x97\x5f\x1e\xc5\x56\x67\xa3\xa3\xf3\x18\x2c\x05\x77\x81\xe0\xd6\xd9\x50\x4c\xa3\xc1\x9a\x1c\x19\x7f\x44\x07\x39\x4a\x78\xa4\xbe\x36\x15\x50\x34\xc6\xab\xd6\xb1\x1a\x9b\x31\xf6\x37\x4c\x26\x0b\xae\x27\x93\x19\xcc\xb9\x75\xe0\x09\xef\xf4\xb2\x9d\xcb\xb2\xa0\x86\x6f\x15\xfd\xfd\x20\xf9\x5b\x26\x68\xf6\x57\xd3\x82\x04\x39\x0a\xd7\xbf\xaf\x78\x97\xf4\x9a\xe0\x3f\xd1\xf1\xa5\x2a\x86\x6a\xb5\x21\x0b\x7b\x3f\x0e\x35\x50\xb5\x56\x92\xa4\xb3\x80\xd6\xaa\x9c\xa3\xa3\xe2\x60\xd5\xe8\xdc\xa8\xac\x08\x09\x03\x03\xa7\x2c\x6c\x03\x2f\x7b\xcb\xa0\x68\xe2\xbe\x8c\x46\x70\x3d\x94\x28\xce\x53\x2a\x21\xd4\x73\xa0\x09\x1f\x05\x0d\xe4\xea\xf5\xf4\xe1\x81\x76\xaa\x3c\x50\x76\x64\xe4\x6c\x30\x9a\xab\x88\x9b\xde\x3e\x9b\x30\x44\x98\xed\xe5\x5c\xec\x5e\x53\xce\xcb\x2d\x10\xe6\xd5\xa1\xd1\xe0\xf7\x23\x4b\x12\x4b\x0e\x9e\x68\x7b\x19\x2a\x2d\xcf\xfb\xcf\x55\x06\x68\xd6\x4d\x4d\xd2\x81\x53\x9d\x0f\x3a\x81\xb3\x14\xfe\x55\x06\xe8\x3b\xd6\x5a\xd0\x3b\xd9\x5f\x88\x58\x4f\x89\xfa\x27\x82\xe8\xad\x74\x25\x1c\x19\x89\x8e\x6f\x48\x6c\xcf\x01\xe1\xcb\xd5\xc7\x39\x94\x5c\x50\xdc\x2d\x1b\x38\xe5\x9d\x39\x22\xff\x50\x2a\x73\xba\x88\xdd\x0e\x6a\xa3\x36\xbc\xf0\x2e\xab\xb8\x20\x76\xb2\x3c\x41\xd6\x77\x4a\x66\x07\xbd\x73\xe0\x16\x6b\x11\x08\x1c\xfc\x65\xfc\x08\x00\x00\xff\xff\x24\x68\xda\xe2\x78\x08\x00\x00")

func readmeTplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTpl,
		"readme.tpl",
	)
}

func readmeTpl() (*asset, error) {
	bytes, err := readmeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tpl", size: 2168, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"readme.tpl": readmeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"readme.tpl": {readmeTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
