// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// readme.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x41\x6f\xe3\x36\x10\x85\xef\xfc\x15\x03\xb8\x87\xd8\x88\xe5\xbb\x83\x16\x08\x92\x16\x0d\xea\x16\x41\xe2\x14\x28\x0c\x03\x9a\x48\x63\x8b\x0d\x45\xb2\xe4\xc8\xa9\x61\xf8\xbf\x2f\x48\xca\xb2\xec\x75\xb0\xd8\xcb\xee\xde\xc4\xa1\xf8\x86\xf3\xbe\xc7\x01\xec\x76\x90\x3d\x3a\xf3\x2f\x15\x9c\x3d\x57\xc6\xf1\x5f\x58\x13\xec\xf7\x42\x2c\xfa\x5b\x6d\x75\x79\xd5\x2f\xbe\x3c\xcd\x60\xbf\x1f\xc2\xf8\x44\xe5\x9e\x7c\xe1\xa4\x65\x69\x74\xd4\x19\x0c\x60\x3e\xbb\xb9\x7f\xba\x11\x22\xcf\xf3\xc2\x68\x6f\x14\x89\x9f\xa0\x22\x55\x83\x23\x6b\x00\xcb\x32\x2a\x3c\x91\x35\x5e\xb2\x71\xdb\x43\xbf\xf3\x72\xea\x78\x72\xb8\xb1\x25\x72\xa7\x27\xb5\x67\x54\xaa\x3d\xa7\x08\x3d\x7d\xa4\xd5\x96\x27\xa1\x7c\x57\xa1\xeb\x86\x84\xb1\xfe\xec\xbc\xb7\x58\x44\x5b\xf2\x3c\x8f\x23\x3d\x68\x76\xa6\x6c\x8a\x30\xa6\x10\xf3\x4a\x7a\x28\x82\x08\x94\x64\x95\xd9\xfa\x13\x4b\x6e\xad\x0d\xba\x46\x03\xc2\xe2\x8f\xe6\x95\x9c\x26\x26\xbf\xbc\xaa\x98\xed\x74\x32\x79\xeb\x4a\x99\x34\x43\x28\x54\xe3\x99\x1c\x34\x5e\xea\x35\x70\x45\xb0\xf8\x9d\x54\x9d\x7e\xf7\xd3\xc9\x24\x8c\x9a\xf9\x6a\x08\x16\x8b\x37\x5c\x13\xd4\xa8\x71\x4d\x2e\x8b\x57\x7b\x74\xe4\xe8\xbf\x46\x7a\xc9\xe4\xc5\x6e\x07\x0e\xf5\x9a\xc2\x6d\x7a\xf5\x30\x4b\xe2\x16\xbe\x76\xbb\x31\x90\x2e\x0f\xbc\x1e\x92\x8b\x87\xee\xd1\x1d\x21\xe6\xa6\xb3\x37\x54\xd3\xb8\xef\x92\xab\xb8\x74\xc9\x2d\xd0\xc1\xc4\xfc\x82\xff\xf9\xf4\x52\x00\xbe\x0d\xb0\x79\xb8\xaf\xa9\x6b\xd4\xe5\x17\x00\x85\x51\x8e\x84\x3a\x14\x32\xed\x94\xb4\xc2\x46\x31\x14\x46\xaf\xe4\xba\x71\x18\xf0\x67\x10\xe4\x17\x27\xb5\xe5\xd5\xe0\x64\x3d\x04\x4f\x31\x2b\xa0\xa4\x67\x1f\xc5\x2c\x3a\xac\x89\xc9\x85\x25\x32\x14\xa8\xe1\x95\x3a\x6d\x2a\xa1\x6c\x5c\x60\xd0\x7a\x94\x9a\x09\xf1\x0b\x8c\x46\x73\x69\x47\xa3\x29\xcc\xa4\x67\x08\xf6\xb5\xee\xfb\x36\x33\x79\xf4\x36\xb4\x4a\x69\x7d\xd1\xf2\x23\xa4\xcd\x61\x6b\x52\x92\x22\xa6\xb8\x9d\x7b\x46\x5f\x8d\x8d\x25\x87\x6c\xdc\x65\x74\xed\xff\x97\xc8\x7d\x15\x10\x47\xb5\xd9\x90\x87\x43\xb0\xfa\xf6\x9b\xda\x1a\x4d\x9a\x3d\xa0\xf7\xa6\x90\xc8\x54\x1e\x33\x97\x22\x98\xa0\xaa\x78\xa0\x97\xc4\xf4\x18\xee\xfa\x14\x52\xdf\x95\x51\xca\xbc\x47\x27\xf0\x55\x51\x8f\x48\x87\x2c\x94\x7b\x78\xcc\x2a\x6e\x3f\x07\x53\x7a\x4d\xb9\x22\xe9\xba\x4c\x6c\x50\x35\xe4\x33\x21\x8e\xf9\xfc\x3b\x96\xe2\xab\x7a\xb6\x54\xc8\xd5\x16\x08\x8b\xea\x28\xdd\x7b\xe2\xf9\x78\xec\x89\xe1\x8d\xb6\x3f\x47\xa5\xc5\x75\xf7\xb9\xcc\x01\xdd\xba\xa9\x49\x33\xb0\x69\xe1\xb6\xd4\xf2\x0c\x7e\x33\x0e\xe8\x7f\xac\xad\xa2\xef\xf2\xc4\x20\xdd\xfc\x7c\xec\x5f\xd3\x95\x3a\xe4\xb7\x8a\xc9\x69\x64\xb9\x21\xb5\xbd\x06\x84\x7f\x6e\xff\x9c\xc1\x4a\x2a\x4a\xf1\xf7\xd1\x21\xd9\x42\x4c\x6e\xc2\xca\xb8\xf3\xb7\xd2\x3e\x13\xeb\xcc\x46\x96\x21\x0d\x95\x54\x24\xce\xf2\x1d\x21\xfd\x10\xd6\xb4\x83\xb4\xe9\xd8\x62\xad\xa2\x1d\x9f\x02\x00\x00\xff\xff\xc0\xfd\x61\xa1\x7a\x07\x00\x00")

func readmeTplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTpl,
		"readme.tpl",
	)
}

func readmeTpl() (*asset, error) {
	bytes, err := readmeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tpl", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"readme.tpl": readmeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"readme.tpl": {readmeTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
